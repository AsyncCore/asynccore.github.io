CREATE DATABASE IF NOT EXISTS ASYNCORE;

SELECT 'SELECCIONANDO ASYNCORE COMO BASE DE DATOS ACTIVA' AS 'INFO';
USE ASYNCORE;

SELECT 'ELIMINANDO TABLAS SI EXISTEN' AS 'INFO';
DROP TABLE IF EXISTS POST_ETIQUETAS, POSTS, HILO_ETIQUETAS, HILOS, ETIQUETAS, CATEGORIA, TOKENS, USERS, TIPO_USUARIO;

SELECT 'CREANDO TABLA TIPO_USUARIO' AS 'INFO';
CREATE TABLE TIPO_USUARIO
(
    ID_TIPO INT PRIMARY KEY, -- 1 ADMIN 2 PROFESOR 3 ALUMNO
    NOMBRE  VARCHAR(255),
    CONSTRAINT CHK_ID_TIPO CHECK (ID_TIPO IN (1, 2, 3))
);

SELECT 'CREANDO TABLA USERS' AS 'INFO';
CREATE TABLE USERS
(
    USER_ID        INT AUTO_INCREMENT PRIMARY KEY,
    NAME           VARCHAR(255) NOT NULL,
    USERNAME       VARCHAR(255) NOT NULL,
    PASSWORD       VARCHAR(255) NOT NULL,
    EMAIL          VARCHAR(255) NOT NULL,
    FECHA_REGISTRO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    AVATAR         VARCHAR(255),
    FIRMA          VARCHAR(300),
    TIPO_USUARIO   INT       DEFAULT 3,
    CONSTRAINT FK_USERS_ID_TIPO FOREIGN KEY (TIPO_USUARIO)
        REFERENCES TIPO_USUARIO (ID_TIPO) ON DELETE CASCADE,
    UNIQUE (EMAIL),
    UNIQUE (USERNAME)
);

SELECT 'CREANDO TABLA TOKENS' AS 'INFO';
CREATE TABLE TOKENS(
                       ID_TOKEN INT AUTO_INCREMENT PRIMARY KEY,
                       TOKEN VARCHAR(255) NOT NULL,
                       USER_ID INT NOT NULL,
                       FECHA_CREA TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       FECHA_EXP TIMESTAMP,
                       CONSTRAINT FK_TOKENS_USER_ID FOREIGN KEY (USER_ID)
                           REFERENCES USERS (USER_ID) ON DELETE CASCADE
);

SELECT 'CREANDO TABLA CATEGORIA' AS 'INFO';
CREATE TABLE CATEGORIA
(
    ID_CATEGORIA INT AUTO_INCREMENT PRIMARY KEY,
    TITULO       VARCHAR(255) NOT NULL,
    SUBTITULO    VARCHAR(255) NOT NULL,
    ICONO        VARCHAR(255) DEFAULT NULL,
    UNIQUE (TITULO)
);

SELECT 'CREANDO TABLA ETIQUETAS' AS 'INFO';
CREATE TABLE ETIQUETAS
(
    ID_ETIQUETA INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE      VARCHAR(255) NOT NULL,
    DESCRIPCION VARCHAR(255) NOT NULL,
    UNIQUE (NOMBRE)
);

SELECT 'CREANDO TABLA HILOS' AS 'INFO';
CREATE TABLE HILOS
(
    ID_HILO        INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID        INT          NOT NULL,
    TITULO         VARCHAR(255) NOT NULL,
    CONTENIDO      TEXT         NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_EDICION  TIMESTAMP DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    ID_CATEGORIA   INT          NOT NULL,
    CONSTRAINT FK_HILOS_USER_ID FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_HILOS_ID_CATEGORIA FOREIGN KEY (ID_CATEGORIA)
        REFERENCES CATEGORIA (ID_CATEGORIA) ON DELETE CASCADE
);

SELECT 'CREANDO TABLA POSTS' AS 'INFO';
CREATE TABLE POSTS
(
    ID_POST        INT AUTO_INCREMENT PRIMARY KEY,
    ID_HILO        INT  NOT NULL,
    USER_ID        INT  NOT NULL,
    CONTENIDO      TEXT NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_EDICION  TIMESTAMP DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT FK_POSTS_ID_HILO FOREIGN KEY (ID_HILO)
        REFERENCES HILOS (ID_HILO) ON DELETE CASCADE,
    CONSTRAINT FK_POSTS_USER_ID FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID) ON DELETE CASCADE
);

SELECT 'CREANDO TABLA HILO_ETIQUETAS' AS 'INFO';
CREATE TABLE HILO_ETIQUETAS
(
    ID_HILO     INT NOT NULL,
    ID_ETIQUETA INT NOT NULL,
    PRIMARY KEY (ID_HILO, ID_ETIQUETA),
    CONSTRAINT FK_HILO_ETIQUETAS_ID_HILO FOREIGN KEY (ID_HILO)
        REFERENCES HILOS (ID_HILO) ON DELETE CASCADE,
    CONSTRAINT FK_HILO_ETIQUETAS_ID_ETIQUETA FOREIGN KEY (ID_ETIQUETA)
        REFERENCES ETIQUETAS (ID_ETIQUETA) ON DELETE CASCADE
);

SELECT 'CREANDO TABLA POST_ETIQUETAS' AS 'INFO';
CREATE TABLE POST_ETIQUETAS
(
    ID_POST     INT NOT NULL,
    ID_ETIQUETA INT NOT NULL,
    PRIMARY KEY (ID_POST, ID_ETIQUETA),
    CONSTRAINT FK_POST_ETIQUETAS_ID_POST FOREIGN KEY (ID_POST)
        REFERENCES POSTS (ID_POST) ON DELETE CASCADE,
    CONSTRAINT FK_POST_ETIQUETAS_ID_ETIQUETA FOREIGN KEY (ID_ETIQUETA)
        REFERENCES ETIQUETAS (ID_ETIQUETA) ON DELETE CASCADE
);

SELECT 'SE HAN CREADO TODAS LAS TABLAS CORRECTAMENTE' AS 'INFO';

SELECT 'INSERTANDO DATOS DE PRUEBA' AS 'INFO';

SELECT 'INSERTANDO TIPOS DE USUARIO' AS 'INFO';

INSERT INTO TIPO_USUARIO
VALUES (1, 'ADMIN');
INSERT INTO TIPO_USUARIO
VALUES (2, 'PROFESOR');
INSERT INTO TIPO_USUARIO
VALUES (3, 'USUARIO');

SELECT 'INSERTANDO CATEGORÍAS' AS 'INFO';

INSERT INTO CATEGORIA(TITULO, SUBTITULO)
VALUES ('GENERAL', 'FORO GENERAL');
INSERT INTO CATEGORIA(TITULO, SUBTITULO)
VALUES ('PROGRAMACIÓN SERVIDOR', 'FORO DE PROGRAMACIÓN BACKEND');
INSERT INTO CATEGORIA(TITULO, SUBTITULO)
VALUES ('PROGRAMACIÓN CLIENTE', 'FORO DE PROGRAMACIÓN FRONTEND');
INSERT INTO CATEGORIA(TITULO, SUBTITULO)
VALUES ('FRAMEWORKS', 'FORO DE FRAMEWORKS');
INSERT INTO CATEGORIA(TITULO, SUBTITULO)
VALUES ('OFF-TOPIC', 'FORO OFF-TOPIC');

SELECT 'INSERTANDO ETIQUETAS' AS 'INFO';

INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('GENERAL', 'FORO GENERAL');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('JAVA', 'PROGRAMACIÓN EN JAVA');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('PYTHON', 'PROGRAMACIÓN EN PYTHON');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('PHP', 'PROGRAMACIÓN EN PHP');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('HTML', 'LENGUAJE DE MARCAS');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('CSS', 'HOJAS DE ESTILO');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('JAVASCRIPT', 'PROGRAMACIÓN EN JAVASCRIPT');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('LARAVEL', 'PROGRAMACIÓN CON LARAVEL');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('DJANGO', 'PROGRAMACIÓN CON DJANGO');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('MEMES', 'MEMES DE PROGRAMACIÓN');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('DUDAS', 'EL USUARIO TIENE DUDAS');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('AYUDA', 'EL USUARIO REQUIERE AYUDA');
INSERT INTO ETIQUETAS(NOMBRE, DESCRIPCION)
VALUES ('CÓDIGO', 'REVISIÓN DE CÓDIGO');

SELECT 'INSERTANDO USUARIOS' AS 'INFO';

INSERT INTO USERS(NAME, USERNAME, PASSWORD, EMAIL, AVATAR, FIRMA, TIPO_USUARIO)
VALUES ('Daniel', 'admin', 'Admin1234', 'asyncoreproject@gmail.com', NULL, 'Er jefe colegah', 1);
INSERT INTO USERS(NAME, USERNAME, PASSWORD, EMAIL, AVATAR, FIRMA, TIPO_USUARIO)
VALUES ('Jorge','Jorge.Dueñas', 'Jorgeduenas01', 'jorge.duenas@educa.madrid.org', NULL, 'Er profeh', 2);
INSERT INTO USERS(NAME, USERNAME, PASSWORD, EMAIL, AVATAR, FIRMA, TIPO_USUARIO)
VALUES ('Miguel', 'Miguel.Martinez', 'MiguelMartinez01', 'mmartinez32@educa.madrid.org', NULL, 'Er compi', 3);
INSERT INTO USERS(NAME, USERNAME, PASSWORD, EMAIL, AVATAR, FIRMA, TIPO_USUARIO)
VALUES ('Víctor', 'Victor.Hellin', 'VictorHellin01', 'victor.hellin@educa.madrid.org', NULL, 'Er compi 2', 3);
INSERT INTO USERS(NAME, USERNAME, PASSWORD, EMAIL, AVATAR, FIRMA, TIPO_USUARIO)
VALUES ('Daniel', 'Daniel.Alonso', 'Danielalonso01', 'dalonso3@educa.madrid.org', NULL, 'Er compi 3', 3);
INSERT INTO USERS(NAME, USERNAME, PASSWORD, EMAIL, AVATAR, FIRMA, TIPO_USUARIO)
VALUES ('Maksym', 'Maksym.Dovgan', 'MaksymDovgan01', 'maksym.dovgan@educa.madrid.org', NULL, 'Er compi 4', 3);
INSERT INTO USERS(NAME, USERNAME, PASSWORD, EMAIL, AVATAR, FIRMA, TIPO_USUARIO)
VALUES ('Marcos', 'Marcos.Almorox', 'Marcosalmorox01', 'marcos.almorox@educa.madrid.org', NULL, 'Er compi 5', 3);

SELECT 'INSERTANDO HILOS' AS 'INFO';

INSERT INTO HILOS(USER_ID, TITULO, CONTENIDO, FECHA_CREACION, ID_CATEGORIA)
VALUES (3, 'Hilo 1 por tricky', 'Holi amiwis', '2023-10-17', 1);
INSERT INTO HILOS(USER_ID, TITULO, CONTENIDO, FECHA_CREACION, ID_CATEGORIA)
VALUES (4, 'Hilo 2 por Víctor', 'Holi holi amiwitos', '2023-10-17', 1);
INSERT INTO HILOS(USER_ID, TITULO, CONTENIDO, FECHA_CREACION, ID_CATEGORIA)
VALUES (7, 'Hilo 3 por Marcos', 'ESTO ES MUCHO MENOS TÓXICO QUE STACKOVERFLOW', '2023-10-17', 1);

SELECT 'INSERTANDO POSTS' AS 'INFO';

INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (1, 4, 'k PASA TRIKY?', '2023-10-17');
INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (1, 3, 'POS AKI ANDAMIOS', '2023-10-18');
INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (1, 4, 'MU BIEN BR0 :D', '2023-10-19');
INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (1, 5, 'OLEOLE!', '2023-10-20');

INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (2, 3, 'K PASA VIKTORCÍN?', '2023-10-17');
INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (2, 4, 'HOLI UwU BIEN', '2023-10-18');
INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (2, 3, 'Y YO K ME ALEGRO', '2023-10-19');
INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (2, 5, 'AMOAI!', '2023-10-20');

INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (3, 6, 'ARO XABAL, ASYNCORE RULZ!', '2023-10-18');
INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (3, 1, 'AGRADECIDA, Y EMOCIONADA...', '2023-10-19');
INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (3, 2, '¡QUE STACKOVERFLOW NO ES TÓXICO!', '2023-10-20');
INSERT INTO POSTS(ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
VALUES (3, 4, 'OwO', '2023-10-20');

SELECT 'INSERTANDO ETIQUETAS DE HILO' AS 'INFO';

INSERT INTO HILO_ETIQUETAS(ID_HILO, ID_ETIQUETA)
VALUES (1, 1);
INSERT INTO HILO_ETIQUETAS(ID_HILO, ID_ETIQUETA)
VALUES (2, 1);

SELECT 'INSERTANDO ETIQUETAS DE POST' AS 'INFO';

INSERT INTO POST_ETIQUETAS(ID_POST, ID_ETIQUETA)
VALUES (1, 1);
INSERT INTO POST_ETIQUETAS(ID_POST, ID_ETIQUETA)
VALUES (1, 11);
INSERT INTO POST_ETIQUETAS(ID_POST, ID_ETIQUETA)
VALUES (2, 1);
INSERT INTO POST_ETIQUETAS(ID_POST, ID_ETIQUETA)
VALUES (2, 11);
INSERT INTO POST_ETIQUETAS(ID_POST, ID_ETIQUETA)
VALUES (2, 2);

SELECT 'SE HAN INSERTADO TODOS LOS DATOS DE PRUEBA CORRECTAMENTE' AS 'INFO';

SELECT 'CREANDO PROCEDIMIENTOS ALMACENADOS' AS 'INFO';

SELECT 'CREANDO SHOW_POSTS' AS 'INFO';

DELIMITER //
DROP PROCEDURE IF EXISTS SHOW_POSTS;
CREATE PROCEDURE SHOW_POSTS(IN P_ID_HILO INT)
BEGIN
    DECLARE DONE INT DEFAULT 0;
    DECLARE POST_ID INT;
    DECLARE USER_NAME VARCHAR(255);
    DECLARE POST_CONTENT TEXT;
    DECLARE FECHA_CREACION TIMESTAMP;
    DECLARE FECHA_EDICION TIMESTAMP;

    DECLARE POST_CURSOR CURSOR FOR
        SELECT POSTS.ID_POST, USERS.USERNAME, POSTS.CONTENIDO, POSTS.FECHA_CREACION, POSTS.FECHA_EDICION
        FROM POSTS
                 INNER JOIN USERS ON POSTS.USER_ID = USERS.USER_ID
        WHERE POSTS.ID_HILO = P_ID_HILO
        ORDER BY POSTS.FECHA_CREACION;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE; -- Esto es para decir que el cursor no va a retornar nada

    OPEN POST_CURSOR;

    READ_LOOP:
    LOOP
        FETCH POST_CURSOR INTO POST_ID, USER_NAME, POST_CONTENT, FECHA_CREACION, FECHA_EDICION;
        IF DONE THEN
            LEAVE READ_LOOP;
        END IF;
        SELECT POST_ID, USER_NAME, POST_CONTENT, FECHA_CREACION, FECHA_EDICION;
    END LOOP;

    CLOSE POST_CURSOR;
END;
DELIMITER ;

DELIMITER //

SELECT 'CREANDO PROCEDIMIENTOS DE ACTUALIZACIÓN DE DATOS DE USUARIO' AS 'INFO';

SELECT 'CREANDO UPDATE_USER' AS 'INFO';
-- UPDATE GENERAL - COALESCE ADMITE NULL PARA DEJAR EL CAMPO SIN UPDATEAR
DROP PROCEDURE IF EXISTS UPDATE_USER;
CREATE PROCEDURE UPDATE_USER(
    IN P_USER_ID INT,
    IN P_USERNAME VARCHAR(255),
    IN P_PASSWORD VARCHAR(255),
    IN P_EMAIL VARCHAR(255),
    IN P_AVATAR VARCHAR(255),
    IN P_FIRMA VARCHAR(255),
    IN P_TIPO_USUARIO INT
)
BEGIN
    UPDATE USERS
    SET USERNAME     = COALESCE(P_USERNAME, USERNAME),
        PASSWORD     = COALESCE(P_PASSWORD, PASSWORD),
        EMAIL        = COALESCE(P_EMAIL, EMAIL),
        AVATAR       = COALESCE(P_AVATAR, AVATAR),
        FIRMA        = COALESCE(P_FIRMA, FIRMA),
        TIPO_USUARIO = COALESCE(P_TIPO_USUARIO, TIPO_USUARIO)
    WHERE USER_ID = P_USER_ID;
END;

SELECT 'CREANDO UPDATE_USERNAME_AND_USERMAIL' AS 'INFO';
-- UPDATE POR CAMPO MAIL O USERNAME - COALESCE ADMITE NULL PARA DEJAR EL CAMPO SIN UPDATEAR
DROP PROCEDURE IF EXISTS UPDATE_USERNAME_AND_USERMAIL;
CREATE PROCEDURE UPDATE_USERNAME_AND_USERMAIL(
    IN P_USER_ID INT,
    IN P_USERNAME VARCHAR(255),
    IN P_EMAIL VARCHAR(255)
)
BEGIN
    UPDATE USERS
    SET USERNAME = COALESCE(P_USERNAME, USERNAME),
        EMAIL    = COALESCE(P_EMAIL, EMAIL)
    WHERE USER_ID = P_USER_ID;
END;

SELECT 'CREANDO UPDATE_PASSWORD' AS 'INFO';
-- UPDATE DE PASSWORD
DROP PROCEDURE IF EXISTS UPDATE_PASSWORD;
CREATE PROCEDURE UPDATE_PASSWORD(
    IN P_USER_ID INT,
    IN P_PASSWORD VARCHAR(255)
)
BEGIN
    UPDATE USERS
    SET PASSWORD = P_PASSWORD
    WHERE USER_ID = P_USER_ID;
END;

SELECT 'CREANDO UPDATE_AVATAR_AND_SIGNATURE' AS 'INFO';
-- UPDATE DE AVATAR Y FIRMA - COALESCE ADMITE NULL PARA DEJAR EL CAMPO SIN UPDATEAR
DROP PROCEDURE IF EXISTS UPDATE_AVATAR_AND_SIGNATURE;
CREATE PROCEDURE UPDATE_AVATAR_AND_SIGNATURE(
    IN P_USER_ID INT,
    IN P_AVATAR VARCHAR(255),
    IN P_FIRMA VARCHAR(255)
)
BEGIN
    UPDATE USERS
    SET AVATAR = COALESCE(P_AVATAR, AVATAR),
        FIRMA  = COALESCE(P_FIRMA, FIRMA)
    WHERE USER_ID = P_USER_ID;
END;

SELECT 'CREANDO UPDATE_USER_TYPE' AS 'INFO';
-- UPDATE DE TIPO DE USUARIO - SOLO ADMINS
DROP PROCEDURE IF EXISTS UPDATE_USER_TYPE;
CREATE PROCEDURE UPDATE_USER_TYPE(
    IN P_USER_ID INT,
    IN P_TIPO_USUARIO INT
)
BEGIN
    UPDATE USERS
    SET TIPO_USUARIO = P_TIPO_USUARIO
    WHERE USER_ID = P_USER_ID;
END;

DELIMITER ;

SELECT 'FIN DE PROCEDIMIENTOS DE ACTUALIZACIÓN DE DATOS DE USUARIO' AS 'INFO';

SELECT 'CREANDO PROCEDIMIENTOS DE MANEJO DE HILOS Y POSTS' AS 'INFO';

SELECT 'CREANDO NEW_THREAD' AS 'INFO';

DELIMITER //
DROP PROCEDURE IF EXISTS NEW_THREAD;
CREATE PROCEDURE NEW_THREAD(
    IN P_USER_ID INT,
    IN P_TITULO VARCHAR(255),
    IN P_CONTENIDO TEXT,
    IN P_ID_CATEGORIA INT
)
BEGIN
    INSERT INTO HILOS (USER_ID, TITULO, CONTENIDO, FECHA_CREACION, ID_CATEGORIA)
    VALUES (P_USER_ID, P_TITULO, P_CONTENIDO, NOW(), P_ID_CATEGORIA);
    /*Esto es para insertar el primer post del hilo
    INSERT INTO POSTS (ID_HILO, USER_ID, CONTENIDO)
    VALUES (LAST_INSERT_ID(), p_user_id, p_contenido);
    Eliminar sin miedo en caso de que no sea necesario.*/
END;
DELIMITER ;

SELECT 'CREANDO NEW_POST' AS 'INFO';

DELIMITER //
DROP PROCEDURE IF EXISTS NEW_POST;
CREATE PROCEDURE NEW_POST(
    IN P_ID_HILO INT,
    IN P_USER_ID INT,
    IN P_CONTENIDO TEXT
)
BEGIN
    INSERT INTO POSTS (ID_HILO, USER_ID, CONTENIDO, FECHA_CREACION)
    VALUES (P_ID_HILO, P_USER_ID, P_CONTENIDO, NOW());
END;
DELIMITER ;

SELECT 'CREANDO LOGIN' AS 'INFO';

DELIMITER //
DROP PROCEDURE IF EXISTS LOGIN;
CREATE PROCEDURE LOGIN(IN P_USERNAME VARCHAR(255), IN P_PASSWORD VARCHAR(255), OUT P_SUCCESS BOOLEAN)
BEGIN
    DECLARE USER_ID INT DEFAULT NULL;
    DECLARE TIPO_USUARIO INT DEFAULT NULL;

    SELECT USER_ID, TIPO_USUARIO
    INTO USER_ID, TIPO_USUARIO
    FROM USERS
    WHERE USERNAME = P_USERNAME
      AND PASSWORD = P_PASSWORD;

    IF USER_ID IS NOT NULL THEN
        SET P_SUCCESS = TRUE;
    ELSE
        SET P_SUCCESS = FALSE;
    END IF;
END;
DELIMITER ;

SELECT 'CREANDO REGISTER' AS 'INFO';

DELIMITER //
DROP PROCEDURE IF EXISTS REGISTER;
CREATE PROCEDURE REGISTER(
    IN P_NAME VARCHAR(255),
    IN P_USERNAME VARCHAR(255),
    IN P_PASSWORD VARCHAR(255),
    IN P_EMAIL VARCHAR(255),
    OUT P_SUCCESS BOOLEAN
)
BEGIN
    DECLARE EXISTING_USER_COUNT INT;

    SELECT COUNT(*)
    INTO EXISTING_USER_COUNT
    FROM USERS
    WHERE USERNAME = P_USERNAME;

    IF EXISTING_USER_COUNT > 0 THEN
        SET P_SUCCESS = FALSE;
    ELSE
        INSERT INTO USERS (NAME, USERNAME, PASSWORD, EMAIL)
        VALUES (P_NAME, P_USERNAME, P_PASSWORD, P_EMAIL);
        SET P_SUCCESS = TRUE;
    END IF;
END;
DELIMITER ;
